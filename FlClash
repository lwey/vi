#################### 全局配置 ####################
mode: rule # 运行模式 rule / global / direct ,Clash Meta 暂不支持 script
log-level: silent # 日志级别 silent / error / warning / info / debug

port: 7890 # http(s) 代理端口
socks-port: 7891 # socks4/4a/5 代理端口
mixed-port: 7892 # 混合端口 同时支持 HTTP(S) 和 SOCKS5 协议
redir-port: 7893 # redirect 透明代理端口,仅能代理 TCP 流量
tproxy-port: 7894 # tproxy 透明代理端口,可代理 TCP 与 UDP 流量

allow-lan: true # 允许局域网连接 false / true
bind-address: "*" # 绑定地址
lan-allowed-ips: # 允许连接的 IP 地址段,仅作用于 allow-lan 为 true, 默认值为0.0.0.0/0和::/0
  - "0.0.0.0/0"
  - "::/0"
lan-disallowed-ips: # 禁止连接的 IP 地址段, 黑名单优先级高于白名单, 默认值为空
  - "192.168.0.3/32"
authentication: # 用户验证 http(s)/socks/mixed代理的用户验证
  - "clash:meta" # 用户:密码
skip-auth-prefixes: # 跳过验证的IP段
  - "127.0.0.1/8"
  - "::1/128"

ipv6: true # IPv6 是否允许内核接受 IPv6 流量
tcp-concurrent: true # TCP 并发 如果域名解析结果对应多个IP,并发请求所有IP,选择握手最快的IP进行通讯
keep-alive-interval: 30 # TCP Keep Alive 间隔,单位分钟 | 控制 Clash 发出 TCP Keep Alive 包的间隔,减少移动设备耗电问题的临时措施
unified-delay: true # 统一延迟
# interface-name: "wlan0" # 出站接口,与 auto-detect-interface 冲突
# routing-mark:  # 路由标记 配置 fwmark 仅用于 Linux

find-process-mode: off # 进程模式 off / strict / always

geodata-mode: true # GEOIP 数据模式,更改 geoip 使用文件,mmdb 或者 dat,可选,true 为 dat
geosite-matcher: succinct # Matcher implementation used by GeoSite, available implementations: - succinct (default, same as rule-set) - mph (from V2Ray, also `hybrid` in Xray)
geodata-loader: memconservative # GEO 文件加载模式 standard / memconservative
geo-auto-update: false # 自动更新 GEO 是否启用,可选 true/false
geo-update-interval: 24 # 更新间隔,单位小时
geox-url: # 自定 GEO 下载地址
  geoip: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/release/geoip.dat"
  geosite: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/release/geosite.dat"
  mmdb: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/release/country.mmdb"
  # asn: "https://raw.githubusercontent.com/xishang0128/geoip/release/GeoLite2-ASN.mmdb"

global-client-fingerprint: chrome # 全局客户端指纹
global-ua: "Mozilla/5.0; AppleWebKit/537.36; Chrome/91.0.4472.114; Safari/537.36; Shadowrocket/1.9.7; meta/1.0.0; Sing/1.1.0" # 全局 UA ,默认clash.meta

# tls: # TLS 目前仅用于 API 的 https
  # certificate: "./tls/cert.pem" # 证书 PEM 格式,或者 证书的路径
  # private-key: "./tls/key.pem" # 证书对应的私钥 PEM 格式,或者私钥路径
  # custom-certifactes:
    # - "./tls/Mozilla.pem"

external-controller: 0.0.0.0:9090 # API 监听地址
# external-controller-tls: 0.0.0.0:9443 # HTTPS-API 监听地址,需要配置 tls 部分证书和其私钥配置,使用 TLS 也必须填写 external-controller
secret: "" # API 的访问密钥

external-ui: "./ui" # 外部用户界面 路径
external-ui-name: "metacubexd" # 自定义外部用户界面名字
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip" # 自定义外部用户界面下载地址


#################### 试验配置 ####################
experimental:
  # quic-go-disable-gso: false # 禁用GSO
  # quic-go-disable-ecn: false # 禁用ECN
  # dialer-ip4p-convert: false # 启用IP4P地址转换

#################### 缓存 ####################
profile:
  store-selected: true # 储存 API 对策略组的选择,以供下次启动时使用
  store-fake-ip: true # fake-ip 缓存,域名再次发生连接时,使用原有映射地址

#################### HOSTS ####################
hosts: # hosts 类似于 /etc/hosts, 仅支持配置单个 IP
  # '*.clash.dev': 127.0.0.1
  # 'alpha.clash.dev': '::1'
  # test.com: [1.1.1.1, 2.2.2.2]
  # baidu.com: google.com # 只允许配置一个别名
  # home.lan: lan # lan 为特别字段,将加入本地所有网卡的地址

#################### DNS ####################
dns:
  enable: true # 关闭将使用系统 DNS
  cache-algorithm: arc # 缓存算法 lru / lfu / arc, 一般不设置使用默认
  prefer-h3: true # 开启 DoH 支持 HTTP/3,将并发尝试，提前确认DNS服务商可用h3
  listen: 0.0.0.0:1053 # 开启 DNS 服务器监听
  ipv6: true # false 将返回 AAAA 的空结果
  ipv6-timeout: 300 # 单位：ms,内部双栈并发时,向上游查询 AAAA 时,等待 AAAA 的时间,默认 100ms
  enhanced-mode: redir-host # mihomo 的 DNS 处理模式 redir-host / fake-ip
  fake-ip-range: 28.0.0.1/8 # fakeip 下的 IP 段设置 198.18.0.1/16 28.0.0.1/8
  fake-ip-filter: # fakeip 过滤,以下地址不会下发 fakeip 映射用于连接
    - "*"
    - "+.lan"
    - "+.invalid.*"
    - "+.localhost"
    - "+.local.*"
    - "+.time.*"
    - "+.ntp.*"
    - "+.time.edu.cn"
    - "+.ntp.org.cn"
    - "+.pool.ntp.org"
    - "+.qpic.cn"
    - "localhost.ptlogin2.qq.com"
    - "localhost.sec.qq.com"
    - "dns.msftncsi.com"
    - "www.msftncsi.com"
    - "www.msftconnecttest.com"
    - "time1.cloud.tencent.com"
  use-hosts: false # 是否查询 hosts,是否启用,可选 true/false
  default-nameserver: # 用于解析 nameserver,fallback 以及其他DNS服务器配置的,DNS 服务域名,只能使用纯 IP 地址,可使用加密的IP DNS
    - "2606:4700:4700::1001" # Cloudflare IPv6
    - "2400:3200:baba::1" # Alibaba IPv6
    - "2606:4700:4700::1111"  # Cloudflare IPv6
    - "2400:3200::1"  # Alibaba IPv6
    - "1.0.0.1" # Cloudflare IPv4
    - "223.6.6.6" # Alibaba IPv4
    - "1.1.1.1" # Cloudflare IPv4
    - "223.5.5.5" # Alibaba IPv4
  nameserver-policy: # 使用指定的 DNS 服务器,优先于 nameserver/fallback 查询
    "geosite:private,cn":
    - "https://[2400:3200::1]/dns-query"  # Alibaba IPv6 DoH
    - "https://[2400:3200:baba::1]/dns-query" # Alibaba IPv6 DoH
    - "https://223.5.5.5/dns-query" # Alibaba IPv4 DoH
    - "https://223.6.6.6/dns-query" # Alibaba IPv4 DoH
  nameserver: # 默认域名解析服务器,如不配置 fallback/proxy-server-nameserver , 则所有域名都由 nameserver 解析
    - "https://[2606:4700:4700::1111]/dns-query"  # Cloudflare IPv6 DoH
    - "https://[2400:3200::1]/dns-query"  # Alibaba IPv6 DoH
    - "https://[2606:4700:4700::1001]/dns-query" # Cloudflare IPv6 DoH
    - "https://[2400:3200:baba::1]/dns-query" # Alibaba IPv6 DoH
    - "https://1.1.1.1/dns-query" # Cloudflare IPv4 DoH
    - "https://223.5.5.5/dns-query" # Alibaba IPv4 DoH
    - "https://1.0.0.1/dns-query" # Cloudflare IPv4 DoH
    - "https://223.6.6.6/dns-query" # Alibaba IPv4 DoH
  proxy-server-nameserver: # 仅用于解析代理节点的域名,配置服务器若查询失败将使用 nameserver,非并发查询
    - "https://[2606:4700:4700::1111]/dns-query"  # Cloudflare IPv6 DoH
    - "https://[2606:4700:4700::1001]/dns-query" # Cloudflare IPv6 DoH
    - "https://1.1.1.1/dns-query" # Cloudflare IPv4 DoH
    - "https://1.0.0.1/dns-query" # Cloudflare IPv4 DoH
  fallback: # 后备域名解析服务器
    - "https://[2606:4700:4700::1111]/dns-query"  # Cloudflare IPv6 DoH
    - "https://[2606:4700:4700::1001]/dns-query" # Cloudflare IPv6 DoH
    - "https://1.1.1.1/dns-query" # Cloudflare IPv4 DoH
    - "https://1.0.0.1/dns-query" # Cloudflare IPv4 DoH
  fallback-filter: # 后备域名解析服务器筛选,满足条件的将使用 fallback结果或只使用 fallback解析
    geoip: true
    geoip-code: CN
    geosite: # geosite 列表的内容被视为已污染,匹配到 geosite 的域名,将只使用 fallback解析,不去使用 nameserver
      - "geolocation-!cn"
    ipcidr: # 这些网段的结果会被视为污染,nameserver解析出这些结果时将会采用 fallback的解析结果
      - "240.0.0.0/4"
      - "127.0.0.1/8"
      - "0.0.0.0/32"

#################### 域名嗅探 ####################
sniffer:
  enable: true # 是否启用,可选 true/false
  force-dns-mapping: true # 对 redir-host 类型识别的流量进行强制嗅探
  parse-pure-ip: true # 对所有未获取到域名的流量进行强制嗅探
  override-destination: true # 是否使用嗅探结果作为实际访问,默认为 true
  sniff:
    QUIC:
      ports: [443, 8443]
    TLS: # TLS 默认如果不配置 ports 默认嗅探 443
      ports: [443, 8443]
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true # 可覆盖 sniffer.override-destination
  force-domain:
    - "+.v2ex.com"
  skip-domain: # 需要跳过嗅探的域名,主要解决部分站点sni字段非域名,导致嗅探结果异常的问题,如米家设备
    - "Mijia Cloud"

#################### TUN ####################
tun:
  enable: true # 是否启用,可选 true/false
  stack: system # tun 模式堆栈 system / gvisor / mixed
  device: Clash # 指定 tun 网卡名称,MacOS 设备只能使用 utun 开头的网卡名
  auto-route: true # 自动设置全局路由,可以自动将全局流量路由进入 tun 网卡
  auto-detect-interface: true # 自动选择流量出口接口,多出口网卡同时连接的设备建议手动指定出口网卡
  strict-route: false # 严格路由 true / false 所有连接路由到 tun 来防止泄漏,但设备将无法被其他设备访问
  # gso: true # 启用通用分段卸载,仅支持 Linux
  # gso-max-size: 65536 # 数据块的最大长度
  dns-hijack: # 需要劫持的 DNS
    - "any:53"
  mtu: 1280 # 最大传输单元 默认：9000
  udp-timeout: 300 # UDP NAT 过期时间,以秒为单位,默认为 300(5 分钟)
  endpoint-independent-nat: false # 启用独立于端点的 NAT,性能可能会略有下降,所以不建议在不需要的时候开启
  inet4-route-address:
    - "0.0.0.0/1"
    - "128.0.0.0/1"
  inet6-route-address:
    - "::/1"
    - "8000::/1"

#################### 监听 ####################
listeners:

#################### NTP ####################
ntp:
  enable: false # 是否启用 NTP 服务
  write-to-system: true # 是否同步至系统时间,需要 root、管理员模式运行
  server: "ntp.tencent.com" # NTP 服务地址
  port: 123 # NTP 服务端口,默认 123
  interval: 60 # 同步时间间隔,单位（分）,默认同步间隔为 30 分

#################### 出站代理 ####################
proxies:
  - name: "⚫ DNS劫持"
    type: dns
    
    
# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 3600, health-check: {enable: true, url: 'http://www.google.com/blank.html', interval: 6}}

# 锚点 - 节点订阅
proxy-providers: 
  机场名称1:
    url: 'http://106.75.143.245:3390/api/v1/client/subscribe?token=4b83c9b85ffb9cf06d86fe5bf1a05d1c'
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: "[机场1] " # 为订阅节点添加机场名称前缀
  机场名称2:
    url: '机场2的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场2.yaml'
    override:
      additional-prefix: "[机场2] " # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUK: &FilterUK '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterFR: &FilterFR '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterDE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)(\d+)?\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)(\d+)?\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 6, tolerance: 20, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack: &FallBack {type: fallback, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders: &RuleProviders {type: http, behavior: classical, interval: 3600, format: yaml, proxy: DIRECT}

# 策略组
proxy-groups: 
  - {name: Telegram, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Twitter, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: AI, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: TikTok, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: YouTube, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Google, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Microsoft, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Final, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United, DIRECT]}
  - {name: Block, type: select, proxies: [REJECT, REJECT-DROP]}
  - {name: HongKong, type: select, proxies: [⏱香港时延优选, 🚥香港故障转移, 🎛香港负载均衡]}
  - {name: Taiwan, type: select, proxies: [⏱台湾时延优选, 🚥台湾故障转移, 🎛台湾负载均衡]}
  - {name: Japan, type: select, proxies: [⏱日本时延优选, 🚥日本故障转移, 🎛日本负载均衡]}
  - {name: Korea, type: select, proxies: [⏱韩国时延优选, 🚥韩国故障转移, 🎛韩国负载均衡]}
  - {name: Singapore, type: select, proxies: [⏱新国时延优选, 🚥新国故障转移, 🎛新国负载均衡]}
  - {name: American, type: select, proxies: [⏱美国时延优选, 🚥美国故障转移, 🎛美国负载均衡]}
  - {name: United, type: select, proxies: [⏱英国时延优选, 🚥英国故障转移, 🎛英国负载均衡]}

# 时延优选策略组
  - {name: ⏱香港时延优选, <<: *UrlTest, filter: *FilterHK}
  - {name: ⏱台湾时延优选, <<: *UrlTest, filter: *FilterTW}
  - {name: ⏱日本时延优选, <<: *UrlTest, filter: *FilterJP}
  - {name: ⏱韩国时延优选, <<: *UrlTest, filter: *FilterKR}
  - {name: ⏱新国时延优选, <<: *UrlTest, filter: *FilterSG}
  - {name: ⏱美国时延优选, <<: *UrlTest, filter: *FilterUS}
  - {name: ⏱英国时延优选, <<: *UrlTest, filter: *FilterUK}
  - {name: ⏱法国时延优选, <<: *UrlTest, filter: *FilterFR}
  - {name: ⏱德国时延优选, <<: *UrlTest, filter: *FilterDE}

# 故障转移策略组
  - {name: 🚥香港故障转移, <<: *FallBack, filter: *FilterHK}
  - {name: 🚥台湾故障转移, <<: *FallBack, filter: *FilterTW}
  - {name: 🚥日本故障转移, <<: *FallBack, filter: *FilterJP}
  - {name: 🚥韩国故障转移, <<: *FallBack, filter: *FilterKR}
  - {name: 🚥新国故障转移, <<: *FallBack, filter: *FilterSG}
  - {name: 🚥美国故障转移, <<: *FallBack, filter: *FilterUS}
  - {name: 🚥英国故障转移, <<: *FallBack, filter: *FilterUK}
  - {name: 🚥法国故障转移, <<: *FallBack, filter: *FilterFR}
  - {name: 🚥德国故障转移, <<: *FallBack, filter: *FilterDE}

# 负载均衡策略组
  - {name: 🎛香港负载均衡, <<: *LoadBalance, filter: *FilterHK}
  - {name: 🎛台湾负载均衡, <<: *LoadBalance, filter: *FilterTW}
  - {name: 🎛日本负载均衡, <<: *LoadBalance, filter: *FilterJP}
  - {name: 🎛韩国负载均衡, <<: *LoadBalance, filter: *FilterKR}
  - {name: 🎛新国负载均衡, <<: *LoadBalance, filter: *FilterSG}
  - {name: 🎛美国负载均衡, <<: *LoadBalance, filter: *FilterUS}
  - {name: 🎛英国负载均衡, <<: *LoadBalance, filter: *FilterUK}
  - {name: 🎛法国负载均衡, <<: *LoadBalance, filter: *FilterFR}
  - {name: 🎛德国负载均衡, <<: *LoadBalance, filter: *FilterDE}

# 订阅规则
rule-providers:

  Reject:
    <<: *RuleProviders
    path: './providers/rule/Reject.yaml'
    url: 'https://raw.githubusercontent.com/yifai/Clash/main/Rules/Reject.yaml'    
    
  LAN:
    <<: *RuleProviders
    path: './rules/Lan.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/LAN_SPLITTER.yaml'
  Direct:
    <<: *RuleProviders
    path: './rules/Direct.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Direct.yaml'

  Proxy:
    <<: *RuleProviders
    path: './rules/Proxy.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Proxy.yaml'

  ChinaDownloadCDN:
    <<: *RuleProviders
    path: './rules/ChinaDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ChinaDownloadCDN.yaml'

  InternationalDownloadCDN:
    <<: *RuleProviders
    path: './rules/InternationalDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/InternationalDownloadCDN.yaml'

  AI:
    <<: *RuleProviders
    path: './rules/AI.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/AI.yaml'

  TikTok:
    <<: *RuleProviders
    path: './rules/TikTok.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/TikTok.yaml'

  Twitter:
    <<: *RuleProviders
    path: './ruleset/Twitter.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Twitter.yaml'    

  YouTube:
    <<: *RuleProviders
    path: './ruleset/YouTube.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/YouTube.yaml'

  Microsoft:
    <<: *RuleProviders
    path: './rules/Microsoft.yaml'
    url: 'https://rule.kelee.one/Clash/Microsoft.yaml'

  Google:
    <<: *RuleProviders
    path: './rules/Google.yaml'
    url: 'https://rule.kelee.one/Clash/Google.yaml'

  Telegram:
    <<: *RuleProviders
    path: './rules/Telegram.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Telegram.yaml'

  ESET_China:
    <<: *RuleProviders
    path: './rules/ESET_China.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ESET_China.yaml'

# 规则指向
rules:
  - IP-CIDR,127.0.0.1/32,Block,no-resolve # 修复 DNS 泄漏
  - IP-CIDR,198.18.0.1/16,Block,no-resolve
  - IP-CIDR,28.0.0.1/8,Block,no-resolve
  - IP-CIDR6,::1/128,Block,no-resolve
  - RULE-SET, LAN, DIRECT
  - RULE-SET, Direct, DIRECT
  - RULE-SET, Proxy, Final
  - RULE-SET, ChinaDownloadCDN, DIRECT
  - RULE-SET, AI, AI
  - RULE-SET, TikTok, TikTok
  - RULE-SET, Reject, Block
  - RULE-SET, Twitter, Twitter
  - RULE-SET, YouTube, YouTube
  - RULE-SET, Microsoft, Microsoft
  - RULE-SET, Google, Google
  - RULE-SET, Telegram, Telegram
  - RULE-SET, ESET_China, DIRECT
  - GEOSITE,CN, DIRECT
  - GEOIP, CN, DIRECT,no-resolve
  - MATCH, Final
