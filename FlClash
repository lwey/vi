# HTTP 代理端口
port: 7890

# SOCKS5 代理端口
socks-port: 7891

# Linux 和 macOS 的 redir 透明代理端口 (重定向 TCP 和 TProxy UDP 流量)
# redir-port: 7892

# Linux 的透明代理端口（适用于 TProxy TCP 和 TProxy UDP 流量)
# tproxy-port: 7893

# HTTP(S) and SOCKS5 共用端口
# mixed-port: 7890

# 本地 SOCKS5/HTTP(S) 服务验证
# authentication:
#  - "user1:pass1"
#  - "user2:pass2"

# 允许局域网的连接（可用来共享代理）
allow-lan: true
bind-address: "*"
# 此功能仅在 allow-lan 设置为 true 时生效，支持三种参数：
# "*"                           绑定所有的 IP 地址
# 192.168.122.11                绑定一个的 IPv4 地址
# "[aaaa::a8aa:ff:fe09:57d8]"   绑定一个 IPv6 地址

# Clash 路由工作模式
# 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）
mode: rule

# Clash 默认将日志输出至 STDOUT
# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。
# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。
log-level: info

# clash 的 RESTful API 监听地址
external-controller: 127.0.0.1:9090

# 存放配置文件的相对路径，或存放网页静态资源的绝对路径
# Clash core 将会将其部署在 http://{{external-controller}}/ui
# external-ui: folder

# RESTful API 的口令 (可选)
# 通过 HTTP 头中 Authorization: Bearer ${secret} 参数来验证口令
# 当 RESTful API 的监听地址为 0.0.0.0 时，请务必设定口令以保证安全
# secret: ""

# 出站网卡接口
# interface-name: en0

# DNS 服务器和建立连接时的 静态 Hosts, 仅在 dns.enhanced-mode 模式为 redir-host 生效
# 支持通配符域名 (例如: *.clash.dev, *.foo.*.example.com )
# 不使用通配符的域名优先级高于使用通配符的域名 (例如: foo.example.com > *.example.com > .example.com )
# 注意: +.foo.com 的效果等同于 .foo.com 和 foo.com
hosts:
# '*.clash.dev': 127.0.0.1
# '.dev': 127.0.0.1
# 'alpha.clash.dev': '::1'
  'mtalk.google.com': 108.177.125.188
  'services.googleapis.cn': 74.125.203.94
  'raw.githubusercontent.com': 151.101.76.133

# DNS 服务器配置(可选；若不配置，程序内置的 DNS 服务会被关闭)
dns:
  enable: true
  listen: 0.0.0.0:53
  ipv6: true # 当此选项为 false 时, AAAA 请求将返回空

  # 以下填写的 DNS 服务器将会被用来解析 DNS 服务的域名
  # 仅填写 DNS 服务器的 IP 地址
  default-nameserver:
    - 223.5.5.5
    - 114.114.114.114
    - 8.8.8.8
  enhanced-mode: fake-ip # 或 redir-host
  fake-ip-range: 198.18.0.1/16 # Fake IP 地址池 (CIDR 形式)
  # use-hosts: true # 查询 hosts 并返回 IP 记录

  # 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址
  fake-ip-filter:
    # 以下域名列表参考自 vernesong/OpenClash 项目，并由 Hackl0us 整理补充
    # === LAN ===
    - '*.lan'
    # === Linksys Wireless Router ===
    - '*.linksys.com'
    - '*.linksyssmartwifi.com'
    # === Apple Software Update Service ===
    - 'swscan.apple.com'
    - 'mesu.apple.com'
    # === Windows 10 Connnect Detection ===
    - '*.msftconnecttest.com'
    - '*.msftncsi.com'
    # === NTP Service ===
    - 'time.*.com'
    - 'time.*.gov'
    - 'time.*.edu.cn'
    - 'time.*.apple.com'

    - 'time1.*.com'
    - 'time2.*.com'
    - 'time3.*.com'
    - 'time4.*.com'
    - 'time5.*.com'
    - 'time6.*.com'
    - 'time7.*.com'

    - 'ntp.*.com'
    - 'ntp.*.com'
    - 'ntp1.*.com'
    - 'ntp2.*.com'
    - 'ntp3.*.com'
    - 'ntp4.*.com'
    - 'ntp5.*.com'
    - 'ntp6.*.com'
    - 'ntp7.*.com'

    - '*.time.edu.cn'
    - '*.ntp.org.cn'
    - '+.pool.ntp.org'

    - 'time1.cloud.tencent.com'
    # === Music Service ===
    ## NetEase
    - '+.music.163.com'
    - '*.126.net'
    ## Baidu
    - 'musicapi.taihe.com'
    - 'music.taihe.com'
    ## Kugou
    - 'songsearch.kugou.com'
    - 'trackercdn.kugou.com'
    ## Kuwo
    - '*.kuwo.cn'
    ## JOOX
    - 'api-jooxtt.sanook.com'
    - 'api.joox.com'
    - 'joox.com'
    ## QQ
    - '+.y.qq.com'
    - '+.music.tc.qq.com'
    - 'aqqmusic.tc.qq.com'
    - '+.stream.qqmusic.qq.com'
    ## Xiami
    - '*.xiami.com'
    ## Migu
    - '+.music.migu.cn'
    # === Game Service ===
    ## Nintendo Switch
    - '+.srv.nintendo.net'
    ## Sony PlayStation
    - '+.stun.playstation.net'
    ## Microsoft Xbox
    - 'xbox.*.microsoft.com'
    - '+.xboxlive.com'
    # === Other ===
    ## QQ Quick Login
    - 'localhost.ptlogin2.qq.com'
    ## Golang
    - 'proxy.golang.org'
    ## STUN Server
    - 'stun.*.*'
    - 'stun.*.*.*'
    - '+.stun.*.*.*.*'
    - 'heartbeat.belkin.com'
    - '*.linksys.com'
    - '*.linksyssmartwifi.com'
    - '*.router.asus.com'
    - 'mesu.apple.com'
    - 'swscan.apple.com'
    - 'swquery.apple.com'
    - 'swdownload.apple.com'
    - 'swcdn.apple.com'
    - 'swdist.apple.com'
    - 'lens.l.google.com'
    - 'stun.l.google.com'
    - '+.nflxvideo.net'
    - '*.square-enix.com'
    - '*.finalfantasyxiv.com'
    - '*.ffxiv.com'
    ## Bilibili CDN
    - '*.mcdn.bilivideo.cn'

  # 支持 UDP / TCP / DoT / DoH 协议的 DNS 服务，可以指明具体的连接端口号。
  # 所有 DNS 请求将会直接发送到服务器，不经过任何代理。
  # Clash 会使用最先获得的解析记录回复 DNS 请求
  nameserver:
    - https://doh.pub/dns-query
    - https://doh.dns.sb/dns-query
    - https://dns.adguard.com/dns-query
    - https://cdn-doh.ssnm.xyz/dns-query
    - 223.5.5.5 # 阿里DNS
    - 180.76.76.76 # 百度DNS
    - 119.29.29.29 # 腾讯DNS
    - 117.50.11.11 # ONE DNS拦截版 恶意网站拦截、广告过滤
    - 117.50.10.10 # ONE DNS纯净版 直接返回其真实的响应结果
    - 114.114.114.114 # 114DNS
    - https://dns.alidns.com/dns-query # 阿里 DoH DNS
    - https://doh.360.cn/dns-query # 360 DoH DNS

  # 当 fallback 参数被配置时, DNS 请求将同时发送至上方 nameserver 列表和下方 fallback 列表中配置的所有 DNS 服务器.
  # 当解析得到的 IP 地址的地理位置不是 CN 时，clash 将会选用 fallback 中 DNS 服务器的解析结果。
  fallback:
    - https://dns.quad9.net:5053/dns-query
    - https://dns-unfiltered.adguard.com/dns-query
    - https://doh.opendns.com/dns-query
    - https://1.0.0.1/dns-query
    - https://public.dns.iij.jp/dns-query
    - https://dns.twnic.tw/dns-query
    - 8.8.8.8 # 谷歌DNS
    - 1.1.1.1 # Cloudflare DNS
    - tls://dns.rubyfish.cn:853
    - tls://1.0.0.1:853
    - tls://dns.google:853
    - https://dns.rubyfish.cn/dns-query
    - https://cloudflare-dns.com/dns-query
    - https://dns.google/dns-query

  # 如果使用 nameserver 列表中的服务器解析的 IP 地址在下方列表中的子网中，则它们被认为是无效的，
  # Clash 会选用 fallback 列表中配置 DNS 服务器解析得到的结果。
  #
  # 当 fallback-filter.geoip 为 true 且 IP 地址的地理位置为 CN 时，
  # Clash 会选用 nameserver 列表中配置 DNS 服务器解析得到的结果。
  #
  # 当 fallback-filter.geoip 为 false, 如果解析结果不在 fallback-filter.ipcidr 范围内，
  # Clash 总会选用 nameserver 列表中配置 DNS 服务器解析得到的结果。
  #
  # 采取以上逻辑进行域名解析是为了对抗 DNS 投毒攻击。
  fallback-filter:
    geoip: false
    ipcidr:
      - 0.0.0.0/8
      - 10.0.0.0/8
      - 100.64.0.0/10
      - 127.0.0.0/8
      - 169.254.0.0/16
      - 172.16.0.0/12
      - 192.0.0.0/24
      - 192.0.2.0/24
      - 192.88.99.0/24
      - 192.168.0.0/16
      - 198.18.0.0/15
      - 198.51.100.0/24
      - 203.0.113.0/24
      - 224.0.0.0/4
      - 240.0.0.0/4
      - 255.255.255.255/32
    domain:
      - '+.google.com'
      - '+.facebook.com'
      - '+.youtube.com'
      - '+.githubusercontent.com'
      - '+.googlevideo.com'

# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 3600, health-check: {enable: true, url: 'http://www.google.com/blank.html', interval: 6}}

# 锚点 - 节点订阅
proxy-providers: 
  机场名称1:
    url: ': "http://106.75.143.245:3390/api/v1/client/subscribe?token=4b83c9b85ffb9cf06d86fe5bf1a05'
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: "[机场1] " # 为订阅节点添加机场名称前缀
  机场名称2:
    url: '机场2的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场2.yaml'
    override:
      additional-prefix: "[机场2] " # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUK: &FilterUK '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterFR: &FilterFR '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterDE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)(\d+)?\b)))(?!.*((?i)回国|校园)).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)(\d+)?\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 6, tolerance: 20, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack: &FallBack {type: fallback, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders: &RuleProviders {type: http, behavior: classical, interval: 3600, format: yaml, proxy: DIRECT}

# 策略组
proxy-groups: 
  - {name: Telegram, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Twitter, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: AI, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: TikTok, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: YouTube, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Google, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Microsoft, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United]}
  - {name: Final, type: select, proxies: [HongKong, Taiwan, Japan, Korea, Singapore, American, United, DIRECT]}
  - {name: Block, type: select, proxies: [REJECT, REJECT-DROP]}
  - {name: HongKong, type: select, proxies: [⏱香港时延优选, 🚥香港故障转移, 🎛香港负载均衡]}
  - {name: Taiwan, type: select, proxies: [⏱台湾时延优选, 🚥台湾故障转移, 🎛台湾负载均衡]}
  - {name: Japan, type: select, proxies: [⏱日本时延优选, 🚥日本故障转移, 🎛日本负载均衡]}
  - {name: Korea, type: select, proxies: [⏱韩国时延优选, 🚥韩国故障转移, 🎛韩国负载均衡]}
  - {name: Singapore, type: select, proxies: [⏱新国时延优选, 🚥新国故障转移, 🎛新国负载均衡]}
  - {name: American, type: select, proxies: [⏱美国时延优选, 🚥美国故障转移, 🎛美国负载均衡]}
  - {name: United, type: select, proxies: [⏱英国时延优选, 🚥英国故障转移, 🎛英国负载均衡]}

# 时延优选策略组
  - {name: ⏱香港时延优选, <<: *UrlTest, filter: *FilterHK}
  - {name: ⏱台湾时延优选, <<: *UrlTest, filter: *FilterTW}
  - {name: ⏱日本时延优选, <<: *UrlTest, filter: *FilterJP}
  - {name: ⏱韩国时延优选, <<: *UrlTest, filter: *FilterKR}
  - {name: ⏱新国时延优选, <<: *UrlTest, filter: *FilterSG}
  - {name: ⏱美国时延优选, <<: *UrlTest, filter: *FilterUS}
  - {name: ⏱英国时延优选, <<: *UrlTest, filter: *FilterUK}
  - {name: ⏱法国时延优选, <<: *UrlTest, filter: *FilterFR}
  - {name: ⏱德国时延优选, <<: *UrlTest, filter: *FilterDE}

# 故障转移策略组
  - {name: 🚥香港故障转移, <<: *FallBack, filter: *FilterHK}
  - {name: 🚥台湾故障转移, <<: *FallBack, filter: *FilterTW}
  - {name: 🚥日本故障转移, <<: *FallBack, filter: *FilterJP}
  - {name: 🚥韩国故障转移, <<: *FallBack, filter: *FilterKR}
  - {name: 🚥新国故障转移, <<: *FallBack, filter: *FilterSG}
  - {name: 🚥美国故障转移, <<: *FallBack, filter: *FilterUS}
  - {name: 🚥英国故障转移, <<: *FallBack, filter: *FilterUK}
  - {name: 🚥法国故障转移, <<: *FallBack, filter: *FilterFR}
  - {name: 🚥德国故障转移, <<: *FallBack, filter: *FilterDE}

# 负载均衡策略组
  - {name: 🎛香港负载均衡, <<: *LoadBalance, filter: *FilterHK}
  - {name: 🎛台湾负载均衡, <<: *LoadBalance, filter: *FilterTW}
  - {name: 🎛日本负载均衡, <<: *LoadBalance, filter: *FilterJP}
  - {name: 🎛韩国负载均衡, <<: *LoadBalance, filter: *FilterKR}
  - {name: 🎛新国负载均衡, <<: *LoadBalance, filter: *FilterSG}
  - {name: 🎛美国负载均衡, <<: *LoadBalance, filter: *FilterUS}
  - {name: 🎛英国负载均衡, <<: *LoadBalance, filter: *FilterUK}
  - {name: 🎛法国负载均衡, <<: *LoadBalance, filter: *FilterFR}
  - {name: 🎛德国负载均衡, <<: *LoadBalance, filter: *FilterDE}

# 订阅规则
rule-providers:

  Reject:
    <<: *RuleProviders
    path: './providers/rule/Reject.yaml'
    url: 'https://raw.githubusercontent.com/yifai/Clash/main/Rules/Reject.yaml'    
    
  LAN:
    <<: *RuleProviders
    path: './rules/Lan.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/LAN_SPLITTER.yaml'
  Direct:
    <<: *RuleProviders
    path: './rules/Direct.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Direct.yaml'

  Proxy:
    <<: *RuleProviders
    path: './rules/Proxy.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Proxy.yaml'

  ChinaDownloadCDN:
    <<: *RuleProviders
    path: './rules/ChinaDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ChinaDownloadCDN.yaml'

  InternationalDownloadCDN:
    <<: *RuleProviders
    path: './rules/InternationalDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/InternationalDownloadCDN.yaml'

  AI:
    <<: *RuleProviders
    path: './rules/AI.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/AI.yaml'

  TikTok:
    <<: *RuleProviders
    path: './rules/TikTok.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/TikTok.yaml'

  Twitter:
    <<: *RuleProviders
    path: './ruleset/Twitter.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/Twitter.yaml'    

  YouTube:
    <<: *RuleProviders
    path: './ruleset/YouTube.yaml'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/Ruleset/YouTube.yaml'

  Microsoft:
    <<: *RuleProviders
    path: './rules/Microsoft.yaml'
    url: 'https://rule.kelee.one/Clash/Microsoft.yaml'

  Google:
    <<: *RuleProviders
    path: './rules/Google.yaml'
    url: 'https://rule.kelee.one/Clash/Google.yaml'

  Telegram:
    <<: *RuleProviders
    path: './rules/Telegram.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Telegram.yaml'

  ESET_China:
    <<: *RuleProviders
    path: './rules/ESET_China.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ESET_China.yaml'

# 规则指向
rules:
  - IP-CIDR,127.0.0.1/32,Block,no-resolve # 修复 DNS 泄漏
  - IP-CIDR,198.18.0.1/16,Block,no-resolve
  - IP-CIDR,28.0.0.1/8,Block,no-resolve
  - IP-CIDR6,::1/128,Block,no-resolve
  - RULE-SET, LAN, DIRECT
  - RULE-SET, Direct, DIRECT
  - RULE-SET, Proxy, Final
  - RULE-SET, ChinaDownloadCDN, DIRECT
  - RULE-SET, AI, AI
  - RULE-SET, TikTok, TikTok
  - RULE-SET, Reject, Block
  - RULE-SET, Twitter, Twitter
  - RULE-SET, YouTube, YouTube
  - RULE-SET, Microsoft, Microsoft
  - RULE-SET, Google, Google
  - RULE-SET, Telegram, Telegram
  - RULE-SET, ESET_China, DIRECT
  - GEOSITE,CN, DIRECT
  - GEOIP, CN, DIRECT,no-resolve
  - MATCH, Final
