# mihomo 配置
# 日期：2025-05-04 22:44:38
# 配置作者：https://t.me/iKeLee
# 适用版本：所有使用 mihomo 核心的程序
port: 7890
socks-port: 7891
mixed-port: 7892
redir-port: 7893
tproxy-port: 7894

unified-delay: true
geodata-mode: false
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 24
tcp-concurrent: true
find-process-mode: strict
global-client-fingerprint: chrome

allow-lan: true
mode: rule
log-level: info
ipv6: true
udp: true

external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-url: 'https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip'

geox-url:
  geoip: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geoip.dat'
  geosite: 'https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/geosite.dat'
  mmdb: 'https://geodata.kelee.one/Country-Masaiki.mmdb'
  asn: 'https://geodata.kelee.one/GeoLite2-ASN-P3TERX.mmdb'
  
profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  force-dns-mapping: true
  parse-pure-ip: true
  override-destination: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - +.v2ex.com

  skip-domain:
    - Mijia Cloud

tun:
  enable: true
  stack: system
  dns-hijack:
    - any:53
  auto-route: true
  auto-detect-interface: true

# P2P下载端口
listeners:
- name: socks5-in-1
  type: socks
  port: 10808
  listen: 0.0.0.0
  udp: true
  users: []
  proxy: DIRECT

dns:
  enable: true
  prefer-h3: true
  listen: 0.0.0.0:1053
  ipv6: false
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - +.lan
  default-nameserver:
    - 223.5.5.5
    - 223.6.6.6
  nameserver:
    - https://223.5.5.5/dns-query
    - https://223.6.6.6/dns-query
    
# 锚点 - 节点订阅的参数 [每小时更新一次订阅节点，每 6 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 3600, health-check: {enable: true, url: 'http://www.google.com/blank.html', interval: 6}}

# 锚点 - 节点订阅
proxy-providers: 
  Hneko云:
    url: ''
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: "[Hneko] " # 为订阅节点添加机场名称前缀
  机场名称2:
    url: '机场2的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称2.yaml'
    override:
      additional-prefix: "[机场名称2] " # 为订阅节点添加机场名称前缀
      
# 锚点 - 节点筛选组
HK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
TW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
JP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
KR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
SG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
US: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
UK: &FilterUK '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FR: &FilterFR '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
DE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)(\d+)?\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
Game: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)(\d+)?\b)))(?!.*((?i)回国|校园)).*$'
All: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author)(\d+)?\b|(\d{4}-\d{2}-\d{2}|\dG)))).*$'

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 6 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 6, tolerance: 20, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 故障转移参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack: &FallBack {type: fallback, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 负载均衡参数 [每 6 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 6, lazy: true, url: 'http://www.google.com/blank.html', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: true, include-all-providers: true}
# 锚点 - 规则参数 [每小时更新一次订阅规则，更新规则时使用直连策略]
RuleProviders: &RuleProviders {type: http, behavior: classical, interval: 3600, format: yaml, proxy: DIRECT}

# 策略组
proxy-groups: 
  #- {name: 游戏选择, type: select, include-all-providers: true, filter: *FilterGame, proxies: [DIRECT, 全球选择]}
  #- {name: 全球选择, type: select, include-all-providers: true, filter: *FilterAll}
  #- {name: 境外下载, type: select, include-all-providers: true, filter: *FilterAll, proxies: [DIRECT]}
  - {name: AI, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/ChatGPT.png, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: TikTok, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png, type: select, include-all-providers: true, filter: *FilterAll}
  - {name: Telegram, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram_X.png, type: select, proxies: [HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: App Store, type: select, proxies: [DIRECT, HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: Apple账户, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_1.png, type: select, proxies: [DIRECT, HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: TestFlight, type: select, proxies: [DIRECT, HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: 1Password, type: select, proxies: [DIRECT, HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: Microsoft, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Game.png, type: select, proxies: [DIRECT, HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: Netflix, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix.png, type: select, proxies: [HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: Emby, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Emby.png, type: select, proxies: [DIRECT, HongKong,TaiWan,Japan,Korea,Singapore,America]}
  - {name: Final, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Final.png, type: fallback, proxies: [HongKong,TaiWan,Japan,Korea,Singapore,America]}
  
  
  - {name: HongKong, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png, type: select, proxies: [HK-Auto, HK-FallBack, HK-LoadBalance]} 
  - {name: TaiWan, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png, type: select, proxies: [TW-Auto, TW-FallBack, TW-LoadBalance]} 
  - {name: Japan, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png, type: select, proxies: [JP-Auto, JP-FallBack, JP-LoadBalance]} 
  - {name: Korea, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Korea.png, type: select, proxies: [KR-Auto, KR-FallBack, KR-LoadBalance]} 
  - {name: Singapore, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png, type: select, proxies: [SG-Auto, SG-FallBack, SG-LoadBalance]} 
  - {name: America, icon: https://gh-proxy.com/https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png, type: select, proxies: [US-Auto, US-FallBack, US-LoadBalance]} 
  #- {name: 英国自动策略, type: select, proxies: [⏱英国时延优选策略组, 🚥英国故障转移策略组, 🎛英国负载均衡策略组]} 
  #- {name: 法国自动策略, type: select, proxies: [⏱法国时延优选策略组, 🚥法国故障转移策略组, 🎛法国负载均衡策略组]} 
  #- {name: 德国自动策略, type: select, proxies: [⏱德国时延优选策略组, 🚥德国故障转移策略组, 🎛德国负载均衡策略组]}
  
# 时延优选策略组
  - {name: HK-Auto, <<: *UrlTest, filter: *FilterHK}
  - {name: TW-Auto, <<: *UrlTest, filter: *FilterTW}
  - {name: JP-Auto, <<: *UrlTest, filter: *FilterJP}
  - {name: KR-Auto, <<: *UrlTest, filter: *FilterKR}
  - {name: SG-Auto, <<: *UrlTest, filter: *FilterSG}
  - {name: US-Auto, <<: *UrlTest, filter: *FilterUS}
  #- {name: ⏱英国时延优选策略组, <<: *UrlTest, filter: *FilterUK}
  #- {name: ⏱法国时延优选策略组, <<: *UrlTest, filter: *FilterFR}
  #- {name: ⏱德国时延优选策略组, <<: *UrlTest, filter: *FilterDE}

# 故障转移策略组
  - {name: HK-FallBack, <<: *FallBack, filter: *FilterHK}
  - {name: TW-FallBack, <<: *FallBack, filter: *FilterTW}
  - {name: JP-FallBack, <<: *FallBack, filter: *FilterJP}
  - {name: SG-FallBack, <<: *FallBack, filter: *FilterKR}
  - {name: KR-FallBack, <<: *FallBack, filter: *FilterSG}
  - {name: US-FallBack, <<: *FallBack, filter: *FilterUS}
  #- {name: 🚥英国故障转移策略组, <<: *FallBack, filter: *FilterUK}
  #- {name: 🚥法国故障转移策略组, <<: *FallBack, filter: *FilterFR}
  #- {name: 🚥德国故障转移策略组, <<: *FallBack, filter: *FilterDE}

# 负载均衡策略组
  - {name: HK-LoadBalance, <<: *LoadBalance, filter: *FilterHK}
  - {name: TW-LoadBalance, <<: *LoadBalance, filter: *FilterTW}
  - {name: JP-LoadBalance, <<: *LoadBalance, filter: *FilterJP}
  - {name: SG-LoadBalance, <<: *LoadBalance, filter: *FilterKR}
  - {name: KR-LoadBalance, <<: *LoadBalance, filter: *FilterSG}
  - {name: US-LoadBalance, <<: *LoadBalance, filter: *FilterUS}
  #- {name: 🎛英国负载均衡策略组, <<: *LoadBalance, filter: *FilterUK}
  #- {name: 🎛法国负载均衡策略组, <<: *LoadBalance, filter: *FilterFR}
  #- {name: 🎛德国负载均衡策略组, <<: *LoadBalance, filter: *FilterDE}
  
# 订阅规则
rule-providers:
  LAN:
    <<: *RuleProviders
    path: './rules/Lan.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/LAN_SPLITTER.yaml'

  Direct:
    <<: *RuleProviders
    path: './rules/Direct.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Direct.yaml'

  Proxy:
    <<: *RuleProviders
    path: './rules/Proxy.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Proxy.yaml'

  ChinaDownloadCDN:
    <<: *RuleProviders
    path: './rules/ChinaDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/ChinaDownloadCDN.yaml'

  InternationalDownloadCDN:
    <<: *RuleProviders
    path: './rules/InternationalDownloadCDN.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/InternationalDownloadCDN.yaml'

  AI:
    <<: *RuleProviders
    path: './rules/AI.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/AI.yaml'

  TikTok:
    <<: *RuleProviders
    path: './rules/TikTok.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/TikTok.yaml'

  Game:
    <<: *RuleProviders
    path: './rules/Game.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/Game.yaml'

  1Password:
    <<: *RuleProviders
    path: './rules/1PasswordUS.yaml'
    url: 'https://kelee.one/Tool/Clash/Rule/1PasswordUS.yaml'

  Steam:
    <<: *RuleProviders
    path: './rules/Steam.yaml'
    url: 'https://rule.kelee.one/Clash/Steam.yaml'
    
  Netflix: 
    <<: *RuleProviders 
    path: './rules/Netflix.yaml' 
    url: 'https://rule.kelee.one/Clash/Netflix.yaml' 
    
  Emby: 
    <<: *RuleProviders 
    path: './rules/Emby.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/EmbyServer.yaml' 
    
  iCloudChina: 
    <<: *RuleProviders 
    path: './rules/iCloudChina.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/iCloudChina.yaml'
    
  ApplePushNotificationService: 
    <<: *RuleProviders 
    path: './rules/ApplePushNotificationService.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/ApplePushNotificationService.yaml' 
    
  AppleSoftwareUpdates: 
    <<: *RuleProviders 
    path: './rules/AppleSoftwareUpdates.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/AppleSoftwareUpdates.yaml' 
  
  AppleID: 
    <<: *RuleProviders 
    path: './rules/AppleID.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/AppleID.yaml' 
    
  AppStore: 
    <<: *RuleProviders 
    path: './rules/AppStore.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/AppStore.yaml' 
    
  TestFlight: 
    <<: *RuleProviders 
    path: './rules/TestFlight.yaml' 
    url: 'https://rule.kelee.one/Clash/TestFlight.yaml' 
    
  Microsoft: 
    <<: *RuleProviders 
    path: './rules/Microsoft.yaml' 
    url: 'https://rule.kelee.one/Clash/Microsoft.yaml' 
    
  Google: 
    <<: *RuleProviders 
    path: './rules/Google.yaml' 
    url: 'https://rule.kelee.one/Clash/Google.yaml' 
    
  Telegram: 
    <<: *RuleProviders 
    path: './rules/Telegram.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/Telegram.yaml' 
    
  ESET_China: 
    <<: *RuleProviders 
    path: './rules/ESET_China.yaml' 
    url: 'https://kelee.one/Tool/Clash/Rule/ESET_China.yaml' 
    
# 规则指向 
rules: 
  - RULE-SET, LAN, DIRECT 
  - RULE-SET, Direct, DIRECT 
  - RULE-SET, Proxy, Final 
  - RULE-SET, ChinaDownloadCDN, DIRECT 
  #- RULE-SET, InternationalDownloadCDN, 境外下载 
  - RULE-SET, AI, AI 
  - RULE-SET, TikTok, TikTok 
  - RULE-SET, Steam, Final 
  #- RULE-SET, Game, 游戏选择 
  - RULE-SET, Netflix, Netflix 
  - RULE-SET, Emby, Emby 
  - RULE-SET, TestFlight, TestFlight 
  - RULE-SET, iCloudChina, DIRECT 
  - RULE-SET, ApplePushNotificationService, DIRECT 
  - RULE-SET, AppleSoftwareUpdates, DIRECT 
  - RULE-SET, AppleID, Apple账户 
  - RULE-SET, AppStore, App Store 
  - RULE-SET, 1Password, 1Password 
  - RULE-SET, Microsoft, Final 
  - RULE-SET, Google, Final 
  - RULE-SET, Telegram, Final 
  - RULE-SET, ESET_China, DIRECT 
  - GEOIP, CN, DIRECT 
  - MATCH, Final
